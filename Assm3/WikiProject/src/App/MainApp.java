/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package App;
import App.GUI.UINode;
import App.peristance.Cashe;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.lang.Math;
import java.net.URL;
import javafx.scene.paint.Paint;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;



import org.netbeans.api.visual.layout.LayoutFactory;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.netbeans.api.visual.widget.Widget;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.action.HoverProvider;
import org.netbeans.api.visual.action.PopupMenuProvider;
import org.netbeans.api.visual.border.BorderFactory;
import org.netbeans.api.visual.graph.GraphScene;
import org.netbeans.api.visual.widget.LabelWidget;
import org.openide.util.Exceptions;


/**
 *
 * @author chrisrk192
 */
public class MainApp extends javax.swing.JFrame {

    private App.peristance.Cashe theCashe;
    private Graph theGraph;
    private App.GUI.GraphGUI theGraphGUI;
    private JLabel j;
    
    /**
     * Creates new form MainApp
     */
    public MainApp() {
        theCashe = new App.peristance.Cashe();
        theGraph = new Graph(theCashe);
        initComponents();
        theGraphGUI = new App.GUI.GraphGUI();
        graphInternalFrame.setContentPane(theGraphGUI);
        graphInternalFrame.pack();
        graphInternalFrame.setVisible(true);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fromComboBox = new javax.swing.JComboBox<>();
        toComboBox = new javax.swing.JComboBox<>();
        testURLInput = new javax.swing.JTextField();
        testURLButton = new javax.swing.JButton();
        similarButotn = new javax.swing.JButton();
        fromInput = new javax.swing.JTextField();
        toInput = new javax.swing.JTextField();
        similarOutput = new javax.swing.JLabel();
        preLoadPages = new javax.swing.JButton();
        preLoadStartingPoint = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        testURLOutPut = new javax.swing.JTextArea();
        findButton = new javax.swing.JButton();
        graphInternalFrame = new javax.swing.JInternalFrame();
        countSTButton = new javax.swing.JButton();
        stLabel = new javax.swing.JLabel();
        displayAll = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("From");

        jLabel2.setText("To");

        fromComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fromComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromComboBoxFocusGained(evt);
            }
        });

        toComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        toComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toComboBoxFocusGained(evt);
            }
        });

        testURLInput.setText("Stack Overflow");
        testURLInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testURLInputActionPerformed(evt);
            }
        });

        testURLButton.setText("Test URL");
        testURLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testURLButtonActionPerformed(evt);
            }
        });

        similarButotn.setText("SIMILAR?");
        similarButotn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similarButotnActionPerformed(evt);
            }
        });

        fromInput.setText("Stack Overflow");

        similarOutput.setText("Similarity: ");

        preLoadPages.setText("LoadSites");
        preLoadPages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preLoadPagesActionPerformed(evt);
            }
        });

        preLoadStartingPoint.setText("Stack Overflow");

        testURLOutPut.setColumns(20);
        testURLOutPut.setRows(5);
        testURLOutPut.setText("OutPut");
        jScrollPane1.setViewportView(testURLOutPut);

        findButton.setText("Find Path");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        graphInternalFrame.setResizable(true);
        graphInternalFrame.setVisible(true);

        javax.swing.GroupLayout graphInternalFrameLayout = new javax.swing.GroupLayout(graphInternalFrame.getContentPane());
        graphInternalFrame.getContentPane().setLayout(graphInternalFrameLayout);
        graphInternalFrameLayout.setHorizontalGroup(
            graphInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphInternalFrameLayout.setVerticalGroup(
            graphInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        countSTButton.setText("Count ST");
        countSTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countSTButtonActionPerformed(evt);
            }
        });

        stLabel.setText("Count: ");

        displayAll.setText("Show All");
        displayAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(testURLButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testURLInput, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(preLoadStartingPoint)
                    .addComponent(similarOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(similarButotn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toInput)
                    .addComponent(countSTButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(preLoadPages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(fromInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphInternalFrame)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(findButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(displayAll)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayAll)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fromInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(toInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(similarButotn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(similarOutput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(preLoadStartingPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(preLoadPages)
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testURLInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countSTButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testURLButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
                    .addComponent(graphInternalFrame))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Does nothing
     */
    private void testURLInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testURLInputActionPerformed
        //DOES NOTHING
    }//GEN-LAST:event_testURLInputActionPerformed
    
    /**
     * Takes input from the tesURLInput textbox and downloads the page data,
     *      then displays it in the testURLOutPut box.
     * @param evt 
     */
    private void testURLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testURLButtonActionPerformed
        Page p = theCashe.getPage(testURLInput.getText());
        if(p == null)
            return;
        //System.out.println(p.text);
        for(int i = 0; i < p.links.size(); i++){
            System.out.println(p.links.get(i).dest);
        }
        testURLOutPut.setText(p.text);
        
        
    }//GEN-LAST:event_testURLButtonActionPerformed

    /**
     * Takes input from the fromInput and toInput textboxes and calculates the
     *      similarity between the two pages's content
     * @param evt 
     */
    private void similarButotnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similarButotnActionPerformed
        Page f = theCashe.getPage(fromInput.getText());
        Page t = theCashe.getPage(toInput.getText());
        double sim = 0.0;
        if(f != null && t != null)
            sim = theGraph.Similarity(f.text, t.text);
        similarOutput.setText(String.format("Similarity: %.5g%n", sim));
    }//GEN-LAST:event_similarButotnActionPerformed

    /**
     * Downloads 500 pages' data starting with preLoadStartingPoint and
     *      branching out from there
     * @param evt 
     */
    private void preLoadPagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preLoadPagesActionPerformed
        int c = 0;
        Page p = theCashe.getPage(preLoadStartingPoint.getText());
        if(p != null)
            for(int i = 0; i < p.links.size(); i++){
                c++;
                System.out.println("Downloading 1st level Link " + c);
                Page q = theCashe.getPage(p.links.get(i).dest);
                if(c >= 500)
                    break;
                if(q != null && q.links != null)
                    for(int j = 0; j < q.links.size(); j++){
                        c++;
                        System.out.println("Downloading 2nd level Link " + c);
                        //System.out.println("GETTING A K????????????");
                        Page k = theCashe.getPage(q.links.get(j).dest);
                        if(c >= 500)
                            break;
                        if(k != null && k.links != null){
                            for(int z = 0; z < k.links.size(); z++){
                                c++;
                                System.out.println("Downloading 4nd level Link " + c);
                                //System.out.println("GETTING A K????????????");
                                Page l = theCashe.getPage(k.links.get(z).dest); 
                                if(c >= 500)
                                    break;
                            }
                        }
                    }    
            }
        System.out.println("ITEMS LOADED: "+c);
        
        System.out.println("Calculating similarity");
        long start = System.currentTimeMillis();
        CalculateSimOfAll();
        long end = System.currentTimeMillis();
        System.out.println("Time ms: " + (end - start));
    }//GEN-LAST:event_preLoadPagesActionPerformed

    private void CalculateSimOfAll(){
        File dir = new File(App.peristance.Persist.getDir());
        File [] f = dir.listFiles();
        //ArrayList<String> fNames = new ArrayList();
        int c = 0;
        for(int i = 0; i < f.length;i++){
            Page p = theCashe.getDownloadedPage(f[i].getName().replace(".ser", ""));
            for(int j = 0; j < p.links.size();j++){
                Page s = theCashe.getDownloadedPage(p.links.get(j).dest.replace(".ser", ""));
                if(s != null){
                    p.links.get(j).weight = theGraph.Similarity(p.text, s.text);
                    c++;
                    System.out.println("Count :" +c);
                }
            }
            theCashe.savePage(p);
            //fNames.add(f[i].getName());//sets the names to a parallel array for easy name loop up
            //System.out.println("Adding "+f[i].getName());
        }
        
    }
    
    /**
     * Populates the from combo box with pages that have been already downloaded
     * @param evt 
     */
    private void fromComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromComboBoxFocusGained
        fromComboBox.removeAll();
        fromComboBox.removeAllItems();
        String[] s = DataCollection.GetDownloadedPageTitles();
        for(int i = 0; i < s.length; i++){
            fromComboBox.addItem(s[i]);
        }
    }//GEN-LAST:event_fromComboBoxFocusGained

    /**
     * Populates the to combo box with pages that have been already downloaded
     * @param evt 
     */
    private void toComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toComboBoxFocusGained
        toComboBox.removeAll();
        toComboBox.removeAllItems();
        String[] s = DataCollection.GetDownloadedPageTitles();
        for(int i = 0; i < s.length; i++){
            toComboBox.addItem(s[i]);
        }
    }//GEN-LAST:event_toComboBoxFocusGained

    /**
     * Takes input from the from and to combo boxes and attempts to locate the 
     *      shortest path between the two pages using Dijkstra's algorithm
     * @param evt 
     */
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        String from,to;
        from = fromComboBox.getSelectedItem().toString();
        to = toComboBox.getSelectedItem().toString();
        if(from == null || from.compareTo("Item 1") == 0 || to == null || to.compareTo("Item 1") == 0)
            return;
        ArrayList<Page> found = theGraph.FindDijkstra(from, to);        
        //reset the GUI
        theGraphGUI = new App.GUI.GraphGUI();
        graphInternalFrame.setContentPane(theGraphGUI);
        graphInternalFrame.pack();
        graphInternalFrame.setVisible(true);
        
        int pos = 0;
        Widget cur;
        if(found != null){
            Page base = found.get(0);
            Widget rootW =
            theGraphGUI.scene.addNode(base.title);
            rootW.setToolTipText(base.title);
            AddActions(rootW);
            pos+=400;
            for (int i = 1; i < found.size(); i++) {
                Page current = found.get(i);
                cur = theGraphGUI.scene.addNode(current.title);
                cur.setToolTipText(current.title);
                cur.setPreferredLocation(new Point(pos, pos));
                AddActions(cur);
                System.out.println("doing stuff");
                //cur = theGraphGUI.scene.addNode(found.get(i-1).title);
                pos+=400;
                App.GUI.GraphGUI.createConnection(theGraphGUI.scene,
                        System.currentTimeMillis()+"",found.get(i-1).title, current.title); 
            }
        }      
    }//GEN-LAST:event_findButtonActionPerformed

    /**
     * Displays the count of spanning trees that can be formed with the pages 
     *      that have been downloaded by using path compression
     * @param evt 
     */
    private void countSTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countSTButtonActionPerformed
        stLabel.setText("Count: "+theGraph.BuildSpanningTrees());
    }//GEN-LAST:event_countSTButtonActionPerformed

    /**
     * Displays all pages and all their links
     * @param evt 
     */
    private void displayAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllActionPerformed
        Page p = theCashe.getPage(testURLInput.getText());
        int numLinks = p.links.size();
        double delta = (2*3.1415)/numLinks;
        int radius = 300;
        //reset the GUI
        theGraphGUI = new App.GUI.GraphGUI();
        graphInternalFrame.setContentPane(theGraphGUI);
        graphInternalFrame.pack();
        graphInternalFrame.setVisible(true);
        
        //display the first page
        Widget cur = theGraphGUI.scene.addNode(p.title);
        cur.setToolTipText(p.title);
        cur.setPreferredLocation(new Point(-200,-100));
        AddActions(cur);
        Point old = cur.getPreferredLocation();
        for(int i = 0; i < numLinks; i++){
            cur = theGraphGUI.scene.addNode(p.links.get(i).dest);
            cur.setToolTipText(p.links.get(i).dest);
            cur.setPreferredLocation(new Point(((int)(Math.cos(delta*i) * radius))+(int)old.getX(), ((int)(Math.sin(delta*i)* radius))+(int)old.getY()));
            AddActions(cur);
            App.GUI.GraphGUI.createConnection(theGraphGUI.scene,System.currentTimeMillis()+" "+p.title+i,p.title, p.links.get(i).dest);
        }
        
    }//GEN-LAST:event_displayAllActionPerformed
   
    /**
     * Displays all the links that a page p contains, then draws and attaches 
     * nodes to the parent widget cur
     * @param p
     * @param cur 
     */
    public void DisplayAllLinks(Page p, Widget cur){
        int numLinks = p.links.size();
        double delta = (2*3.1415)/numLinks;
        int radius = 400;
        
        Point old = cur.getPreferredLocation();
        for(int i = 0; i < numLinks; i++){
            try{
            cur = theGraphGUI.scene.addNode(p.links.get(i).dest);
            cur.setPreferredLocation(new Point(((int)(Math.cos(delta*i) * radius))+(int)old.getX(), 
                    ((int)(Math.sin(delta*i)* radius))+(int)old.getY()));
            //name the link
            App.GUI.GraphGUI.createConnection(theGraphGUI.scene,
                    System.currentTimeMillis()+" "+p.title+i,p.title, p.links.get(i).dest);
            } catch(Exception e){
            
            }
        }
    }
    
    /**
     * Displays all the links that a page p contains where p is the page whose 
     *      title is String s, then draws and attaches nodes to the parent widget cur
     * @param s
     * @param cur 
     */
    public void DisplayAllLinks(String s, Widget cur){
        Page p = theCashe.getPage(s);
        int numLinks = p.links.size();
        double delta = (2*3.1415)/numLinks;
        int radius = 400;
        
        Point old = cur.getPreferredLocation();
        for(int i = 0; i < numLinks; i++){
            try{
                cur = theGraphGUI.scene.addNode(p.links.get(i).dest);
                cur.setPreferredLocation(new Point(((int)(Math.cos(delta*i) * radius))+(int)old.getX(),
                        ((int)(Math.sin(delta*i)* radius))+(int)old.getY()));
                App.GUI.GraphGUI.createConnection(theGraphGUI.scene,
                        System.currentTimeMillis()+" "+p.title+i,p.title, p.links.get(i).dest);
            } catch(Exception e){
                
            }
        }
    }
    
    /**
     * Searches through all downloaded pages and compares each to the target string;
     *      ignoring a perfect match as they would be the same page
     * @param targetName the title of the most similar page
     * @return 
     */
    public String FindMostSimilar(String targetName){
        Page target = theCashe.getPage(targetName);
        Page mostSim = null;
        double maxSim = 0.0;
        double tempsim;
        ArrayList<String> fnames = App.peristance.Persist.GetFileNames();
        for(int i = 0; i < fnames.size(); i++){
            //System.out.println("Looking for "+fnames.get(i));
            Page temp = theCashe.getDownloadedPage(fnames.get(i).replace(".ser", ""));
            //System.out.println(target.text);
            //System.out.println(temp.text);
            if(temp != null)
                if((tempsim = theGraph.Similarity(target.text, temp.text)) > maxSim && tempsim != 1.0){
                    maxSim = tempsim;
                    mostSim = temp;
                }
        }
        if(mostSim == null)
            return "Most Similar not found.";
        return mostSim.title + ": " + maxSim;
    }
    
    public void HideLinks(Widget w){
        //ArrayList<>theGraphGUI.scene.findNodeEdges(w, true, false)
        //theGraphGUI.scene.findEdgesBetween(SOMEBITS, rootPane);
        theGraphGUI.scene.removeNode(theGraphGUI.scene.findObject(w));
    }    
    
    /**
     * Adds functionality to the Widget w
     * Functions include:
     *      Show Links
     *      Find Most Similar
     * @param w 
     */
    public void AddActions(Widget w){
        w.getActions ().addAction (ActionFactory.createPopupMenuAction (
            new PopupMenuProvider() {
                @Override
                protected Object clone() throws CloneNotSupportedException {
                    return super.clone(); //To change body of generated methods, choose Tools | Templates.
            }
            public JPopupMenu getPopupMenu (Widget widget, Point localLocation) {
            JPopupMenu popup = new JPopupMenu ();
            //add show links functionality
            JMenuItem jm = new JMenuItem();
            jm.setText("Show Links");
            jm.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        DisplayAllLinks(widget.getToolTipText(), widget);
                    }
                }    
            );
            popup.add(jm);
           
            //add display most similar functionality
            JMenuItem jm2 = new JMenuItem();
            jm2.setText("Most Similar");
            jm2.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String display = FindMostSimilar(widget.getToolTipText());
                        System.out.println(display);
                        LabelWidget lw = new LabelWidget(theGraphGUI.scene, display);
                        lw.setPreferredLocation(new Point(0, 20));
                        widget.addChild(lw);
                        theGraphGUI.scene.paint();
                        theGraphGUI.scene.validate();
                    }
                }    
            );
            popup.add(jm2);
            
            JMenuItem jm3 = new JMenuItem();
            jm3.setText("Remove Node");
            jm3.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        theGraphGUI.scene.removeNode(theGraphGUI.scene.findObject(widget));
                        theGraphGUI.scene.paint();
                        theGraphGUI.scene.validate();
                    }
                }    
            );
            popup.add(jm3);
            
            
            JMenuItem jm4 = new JMenuItem();
            jm4.setText("Hide Links");
            jm4.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        Page p = theCashe.getDownloadedPage(widget.getToolTipText());
                        if(p != null && p.links != null){
                            for(int i = 0; i < p.links.size(); i++){
                                try {
                                   theGraphGUI.scene.removeNode(p.links.get(i).dest); 
                                } catch (Exception excp) {
                                }
                                
                            }
                            
                        }
                        theGraphGUI.scene.paint();
                        theGraphGUI.scene.validate();
                    }
                }    
            );
            popup.add(jm4);
            
            
            JMenuItem jm5 = new JMenuItem();
            jm5.setText("About");
            jm5.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JEditorPane jep = new JEditorPane();
                        jep.setPreferredSize(new Dimension(800,600));
                        jep.setEditable(false);   

                        try {
                          jep.setPage("https://en.wikipedia.org/wiki/"+widget.getToolTipText().replace(" ", "_"));
                          
                        }catch (IOException ex) {
                          jep.setContentType("text/html");
                          jep.setText("<html>Could not load</html>");
                        } 

                        JScrollPane scrollPane = new JScrollPane(jep);
                        scrollPane.setSize(new Dimension(800,600));
                        JFrame f = new JFrame("About");
                        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        f.getContentPane().add(scrollPane);
                        f.setVisible(true);
                        f.setPreferredSize(new Dimension(800,600));
                        f.setBounds(new Rectangle(new Dimension(800, 600)));
                        theGraphGUI.scene.paint();
                        theGraphGUI.scene.validate();
                    }
                }    
            );
            popup.add(jm5);
            
            
            
            return popup;
            }
        }));
    w.getActions().addAction(ActionFactory.createHoverAction(
            new HoverProvider() {
            @Override
            public void widgetHovered(Widget widget) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
    }));
                
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton countSTButton;
    private javax.swing.JButton displayAll;
    private javax.swing.JButton findButton;
    private javax.swing.JComboBox<String> fromComboBox;
    private javax.swing.JTextField fromInput;
    private javax.swing.JInternalFrame graphInternalFrame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton preLoadPages;
    private javax.swing.JTextField preLoadStartingPoint;
    private javax.swing.JButton similarButotn;
    private javax.swing.JLabel similarOutput;
    private javax.swing.JLabel stLabel;
    private javax.swing.JButton testURLButton;
    private javax.swing.JTextField testURLInput;
    private javax.swing.JTextArea testURLOutPut;
    private javax.swing.JComboBox<String> toComboBox;
    private javax.swing.JTextField toInput;
    // End of variables declaration//GEN-END:variables
}
